# This is an auto-generated Django model module.# You'll have to do the following manually to clean this up:#   * Rearrange models' order#   * Make sure each model has one field with primary_key=True#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table# Feel free to rename the models, but don't rename db_table values or field names.from django.db import modelsclass Eventtickets(models.Model):    ticket_id = models.IntegerField(primary_key=True)    event_id = models.IntegerField()    ticket_type = models.ForeignKey('Tickettypes', models.DO_NOTHING)    price = models.DecimalField(max_digits=8, decimal_places=2)    available_quantity = models.IntegerField()    class Meta:        managed = False        db_table = 'EventTickets'class Eventtypes(models.Model):    event_type_id = models.IntegerField(primary_key=True)    event_type_name = models.CharField(max_length=255)    description = models.TextField()    class Meta:        managed = False        db_table = 'EventTypes'class Events(models.Model):    event = models.OneToOneField('Registrations', models.DO_NOTHING, primary_key=True)    name = models.CharField(max_length=255)    description = models.TextField()    event_type = models.ForeignKey(Eventtypes, models.DO_NOTHING)    start_date = models.DateTimeField()    end_date = models.DateTimeField()    location = models.ForeignKey('Locations', models.DO_NOTHING)    organizer_id = models.IntegerField()    capacity = models.IntegerField()    is_public = models.BooleanField()    created_at = models.DateTimeField()    updated_at = models.DateTimeField()    class Meta:        managed = False        db_table = 'Events'class Eventsorganizers(models.Model):    event = models.ForeignKey(Events, models.DO_NOTHING)    organizer = models.ForeignKey('Organizers', models.DO_NOTHING)    class Meta:        managed = False        db_table = 'EventsOrganizers'class Locations(models.Model):    location_id = models.IntegerField(primary_key=True)    location_name = models.CharField(max_length=255)    address = models.CharField(max_length=255)    city = models.CharField(max_length=255)    capacity = models.IntegerField()    class Meta:        managed = False        db_table = 'Locations'class Organizers(models.Model):    organizer_id = models.IntegerField(primary_key=True)    organizer_name = models.CharField(max_length=255)    contact_name = models.CharField(max_length=255)    contact_email = models.CharField(max_length=255)    contact_phone = models.CharField(max_length=255)    description = models.TextField()    class Meta:        managed = False        db_table = 'Organizers'class Registrations(models.Model):    registration_id = models.IntegerField(primary_key=True)    participant_id = models.IntegerField()    registration_date = models.DateTimeField()    payment_status = models.IntegerField()    payment_method = models.IntegerField()    ticket = models.ForeignKey(Eventtickets, models.DO_NOTHING)    class Meta:        managed = False        db_table = 'Registrations'class Tickettypes(models.Model):    ticket_type_id = models.IntegerField(primary_key=True)    ticket_type_name = models.CharField(max_length=255)    class Meta:        managed = False        db_table = 'TicketTypes'class Users(models.Model):    user_id = models.IntegerField(primary_key=True)    event_id = models.BigIntegerField()    username = models.CharField(max_length=255)    password = models.CharField(max_length=255)    first_name = models.CharField(max_length=255)    last_name = models.CharField(max_length=255)    email = models.CharField(max_length=255)    phone_number = models.CharField(max_length=255)    class Meta:        managed = False        db_table = 'Users'class Usersregistrations(models.Model):    user = models.ForeignKey(Users, models.DO_NOTHING)    registration = models.ForeignKey(Registrations, models.DO_NOTHING)    class Meta:        managed = False        db_table = 'UsersRegistrations'class AuthGroup(models.Model):    name = models.CharField(unique=True, max_length=150)    class Meta:        managed = False        db_table = 'auth_group'class AuthGroupPermissions(models.Model):    id = models.BigAutoField(primary_key=True)    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)    class Meta:        managed = False        db_table = 'auth_group_permissions'        unique_together = (('group', 'permission'),)class AuthPermission(models.Model):    name = models.CharField(max_length=255)    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)    codename = models.CharField(max_length=100)    class Meta:        managed = False        db_table = 'auth_permission'        unique_together = (('content_type', 'codename'),)class AuthUser(models.Model):    password = models.CharField(max_length=128)    last_login = models.DateTimeField(blank=True, null=True)    is_superuser = models.BooleanField()    username = models.CharField(unique=True, max_length=150)    first_name = models.CharField(max_length=150)    last_name = models.CharField(max_length=150)    email = models.CharField(max_length=254)    is_staff = models.BooleanField()    is_active = models.BooleanField()    date_joined = models.DateTimeField()    class Meta:        managed = False        db_table = 'auth_user'class AuthUserGroups(models.Model):    id = models.BigAutoField(primary_key=True)    user = models.ForeignKey(AuthUser, models.DO_NOTHING)    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)    class Meta:        managed = False        db_table = 'auth_user_groups'        unique_together = (('user', 'group'),)class AuthUserUserPermissions(models.Model):    id = models.BigAutoField(primary_key=True)    user = models.ForeignKey(AuthUser, models.DO_NOTHING)    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)    class Meta:        managed = False        db_table = 'auth_user_user_permissions'        unique_together = (('user', 'permission'),)class DjangoAdminLog(models.Model):    action_time = models.DateTimeField()    object_id = models.TextField(blank=True, null=True)    object_repr = models.CharField(max_length=200)    action_flag = models.SmallIntegerField()    change_message = models.TextField()    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)    user = models.ForeignKey(AuthUser, models.DO_NOTHING)    class Meta:        managed = False        db_table = 'django_admin_log'class DjangoContentType(models.Model):    app_label = models.CharField(max_length=100)    model = models.CharField(max_length=100)    class Meta:        managed = False        db_table = 'django_content_type'        unique_together = (('app_label', 'model'),)class DjangoMigrations(models.Model):    id = models.BigAutoField(primary_key=True)    app = models.CharField(max_length=255)    name = models.CharField(max_length=255)    applied = models.DateTimeField()    class Meta:        managed = False        db_table = 'django_migrations'class DjangoSession(models.Model):    session_key = models.CharField(primary_key=True, max_length=40)    session_data = models.TextField()    expire_date = models.DateTimeField()    class Meta:        managed = False        db_table = 'django_session'