# This is an auto-generated Django model module.# You'll have to do the following manually to clean this up:#   * Rearrange models' order#   * Make sure each model has one field with primary_key=True#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior#   * Remove `` lines if you wish to allow Django to create, modify, and delete the table# Feel free to rename the models, but don't rename db_table values or field names.from django.db import modelsclass Eventtickets(models.Model):    ticket_type = models.ForeignKey('Tickettypes', models.DO_NOTHING)    price = models.DecimalField(max_digits=8, decimal_places=2)    available_quantity = models.IntegerField()    class Meta:        db_table = 'EventTickets'        verbose_name_plural = db_table    def __str__(self):        return self.ticket_typeclass Eventtypes(models.Model):    event_type_name = models.CharField(max_length=255)    description = models.TextField()    class Meta:        db_table = 'EventTypes'        verbose_name_plural = db_table    def __str__(self):        return self.event_type_nameclass Events(models.Model):    name = models.CharField(max_length=255)    description = models.TextField()    event_type = models.ForeignKey('Eventtypes', models.DO_NOTHING)    start_date = models.DateTimeField()    end_date = models.DateTimeField()    location = models.ForeignKey('Locations', models.DO_NOTHING)    organizer = models.ManyToManyField('Organizers')    capacity = models.IntegerField()    is_public = models.BooleanField(default=True)    created_at = models.DateTimeField(auto_now_add=True)    updated_at = models.DateTimeField(auto_now=True)    class Meta:        db_table = 'Events'        verbose_name_plural = db_table    def __str__(self):        return self.nameclass Locations(models.Model):    location_name = models.CharField(max_length=255)    address = models.CharField(max_length=255)    city = models.CharField(max_length=255)    capacity = models.IntegerField()    class Meta:        db_table = 'Locations'        verbose_name_plural = db_table    def __str__(self):        return self.location_nameclass Organizers(models.Model):    name = models.CharField(max_length=255)    contact_email = models.CharField(max_length=255)    contact_phone = models.CharField(max_length=255)    description = models.TextField()    class Meta:        db_table = 'Organizers'        verbose_name_plural = db_table    def __str__(self):        return self.nameclass Registrations(models.Model):    event_id = models.ForeignKey('Events', models.DO_NOTHING)    participant_id = models.IntegerField()    registration_date = models.DateTimeField()    payment_status = models.IntegerField()    payment_method = models.IntegerField()    ticket = models.ForeignKey('Eventtickets', models.DO_NOTHING)    class Meta:        db_table = 'Registrations'        verbose_name_plural = db_table    def __str__(self):        return self.registration_idclass Tickettypes(models.Model):    ticket_type_name = models.CharField(max_length=255)    class Meta:        db_table = 'TicketTypes'        verbose_name_plural = db_table    def __str__(self):        return self.ticket_type_name# class Users(models.Model):#     user_id = models.IntegerField(primary_key=True)#     event_id = models.IntegerField()#     event_id = models.IntegerField()#     username = models.CharField(max_length=255)#     password = models.CharField(max_length=255)#     first_name = models.CharField(max_length=255)#     last_name = models.CharField(max_length=255)#     email = models.CharField(max_length=255)#     phone_number = models.CharField(max_length=255)##     class Meta:##         db_table = 'Users'### class Usersregistrations(models.Model):#     user = models.ForeignKey(Users, models.DO_NOTHING)#     registration = models.ForeignKey(Registrations, models.DO_NOTHING)##     class Meta:##         db_table = 'UsersRegistrations'